%%writefile lab/usm_lab.cpp
//==============================================================
// Copyright Â© Intel Corporation
//
// SPDX-License-Identifier: MIT
// =============================================================
#include <sycl/sycl.hpp>
#include <cmath>

using namespace sycl;

static const int N = 1024;

int main() {
  queue q;
  std::cout << "Device : " << q.get_device().get_info<info::device::name>() << "\n";

  //intialize 2 arrays on host
  int *data1 = static_cast<int *>(malloc(N * sizeof(int)));
  int *data2 = static_cast<int *>(malloc(N * sizeof(int)));
  for (int i = 0; i < N; i++) {
    data1[i] = 25;
    data2[i] = 49;
  }
    
  //# STEP 1 : Create USM device allocation for data1 and data2
  int *dev_data1 = malloc_device<int>(N, q);
  int *dev_data2 = malloc_device<int>(N, q);

  //# STEP 2 : Copy data1 and data2 to USM device allocation
  q.memcpy(dev_data1, data1, N * sizeof(int)).wait();
  q.memcpy(dev_data2, data2, N * sizeof(int)).wait();

  //# STEP 3 : Write kernel code to update data1 on device with sqrt of value
  q.parallel_for(N, [=](auto i) { 
    dev_data1[i] = sqrt(dev_data1[i]);
  }).wait();

  //# STEP 3 : Write kernel code to update data2 on device with sqrt of value
  q.parallel_for(N, [=](auto i) { 
    dev_data2[i] = sqrt(dev_data2[i]);
  }).wait();

  //# STEP 5 : Write kernel code to add data2 on device to data1
  q.parallel_for(N, [=](auto i) { 
    dev_data1[i] += dev_data2[i];
  }).wait();

  //# STEP 6 : Copy data1 on device to host
  q.memcpy(data1, dev_data1, N * sizeof(int)).wait();

  //# verify results
  int fail = 0;
  for (int i = 0; i < N; i++) {
    if (data1[i] != 12) {
      fail = 1;
      break;
    }
  }
  if(fail == 1) std::cout << " FAIL"; else std::cout << " PASS";
  std::cout << "\n";

  //# STEP 7 : Free USM device allocations
  free(dev_data1, q);
  free(dev_data2, q);
  free(data1);
  free(data2);

  //# STEP 8 : Add event based kernel dependency for the Steps 2 - 6
  // Already implemented via .wait() on queue operations

  return 0;
}
